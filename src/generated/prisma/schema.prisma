// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @unique @default(cuid())
  email           String            @unique
  phoneNumber     String?           @unique
  password        String
  firstName       String
  lastName        String
  createdTasks    Task[]            @relation("CreatedTasks")
  assignedTasks   Task[]            @relation("AssignedTasks")
  department      Department?       @relation(fields: [departmentId], references: [id])
  departmentId    String?
  profilePicture  String?
  lastLogin       DateTime?
  loginAttempts   Int               @default(0)
  OtpAttempts     OtpAttempts?
  emailVerified   DateTime?
  OtpVerification OtpVerification[]
  passwordReset   PasswordReset[]
  loginTokens     LoginToken?
  role            UserRole          @default(DOCTOR)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  patientsCreated Patient[]         @relation("CreatedPatients")

  @@index([email, role])
}

model LoginToken {
  id              String    @id @default(uuid())
  tokenHashSHA256 String    @unique // For fast lookups
  tokenHashBcrypt String // For secure validation  expiresAt DateTime
  used            Boolean   @default(false)
  userId          String    @unique
  user            User      @relation(fields: [userId], references: [id])
  createdAt       DateTime  @default(now())
  expiresAt       DateTime?
}

enum UserRole {
  ADMIN
  DOCTOR
  NURSE
  LABTECH
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Task {
  id           String       @id @default(cuid())
  title        String
  description  String
  status       TaskStatus   @default(PENDING)
  priority     TaskPriority @default(MEDIUM)
  dueDate      DateTime
  createdAt    DateTime     @default(now())
  createdBy    User         @relation("CreatedTasks", fields: [createdById], references: [id])
  createdById  String
  assignedTo   User?        @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId String?
  patient      Patient?     @relation(fields: [patientId], references: [id])
  patientId    String?
}

model Patient {
  id            String   @id @default(cuid())
  name          String
  dob           DateTime
  medicalRecord String
  createdAt     DateTime @default(now())
  createdBy     User?    @relation("CreatedPatients", fields: [createdById], references: [id])
  createdById   String
  tasks         Task[]
}

model Department {
  id          String @id @default(cuid())
  name        String
  description String
  users       User[]
}

model OtpVerification {
  id      String   @id @default(cuid())
  otp     String   @unique
  expires DateTime
  userId  String
  User    User     @relation(fields: [userId], references: [id])

  @@unique([userId, otp])
}

model OtpAttempts {
  id       String   @id @default(cuid())
  attempts Int      @default(0)
  lastTry  DateTime @default(now())
  userId   String   @unique
  User     User     @relation(fields: [userId], references: [id])
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String   @unique
  User      User     @relation(fields: [userId], references: [id])
  token     String
  expiresAt DateTime
  createdAt DateTime

  @@index([expiresAt]) // For efficient cleanup of expired tokens
  @@index([userId]) // For finding user's active reset requests
}
