// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL") // FOR SUPABASE
}

model User {
  id              String      @id @unique @default(cuid())
  email           String      @unique
  phoneNumber     String?     @unique
  password        String
  firstName       String
  lastName        String
  createdTasks    Task[]      @relation("CreatedTasks")
  assignedTasks   Task[]      @relation("AssignedTasks")
  department      Department? @relation(fields: [departmentId], references: [id])
  departmentId    String?
  profilePicture  String?
  role            UserRole    @default(DOCTOR)
  isApproved      Boolean     @default(false)
  approvedBy      User?       @relation("ApprovedUsers", fields: [approvedById], references: [id])
  approvedById    String?
  approvedUsers   User[]      @relation("ApprovedUsers")
  approvedAt      DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  createdPatients Patient[]   @relation("CreatedPatients")
  expoPushToken   String?     @unique

  @@index([email, role])
  @@index([isApproved])
}

enum UserRole {
  ADMIN
  DOCTOR
  NURSE
  LABTECH
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

model Task {
  id           String       @id @default(cuid())
  title        String
  description  String
  status       TaskStatus   @default(PENDING)
  priority     TaskPriority @default(MEDIUM)
  dueDate      DateTime
  createdAt    DateTime     @default(now())
  createdBy    User         @relation("CreatedTasks", fields: [createdById], references: [id])
  createdById  String
  assignedTo   User?        @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId String?
  patient      Patient?     @relation(fields: [patientId], references: [id])
  patientId    String?
}

model Patient {
  id            String   @id @default(cuid())
  name          String
  dob           DateTime
  roomNumber    String?
  medicalRecord String
  createdAt     DateTime @default(now())
  createdBy     User?    @relation("CreatedPatients", fields: [createdById], references: [id])
  createdById   String
  tasks         Task[]
}

model Department {
  id          String @id @default(cuid())
  name        String
  description String
  users       User[]
}
